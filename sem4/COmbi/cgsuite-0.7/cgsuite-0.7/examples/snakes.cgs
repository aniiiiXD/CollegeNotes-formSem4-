/*************************************************************************
  snakes.cgs
  Combinatorial Game Suite Example Script
  
  Searches for a Domineering "snake" of minimum length whose value is a
  number with denominator >= 8.  (A snake is a connected position where
  every empty square borders at most two others.)
*************************************************************************/

// Main procedure to search snakes of length n.
snakes := proc(n) local i, j, recurse, grid, solution;

  // Initialize the grid.  Note that every snake of length n can fit onto
  // an n by n-1 board.
  for i from 1 to n do
    for j from 1 to n-1 do
      grid[i][j] := "x"
    od
  od;
  
  // Recursive subprocedure that first tries to move east, then tries to
  // move south.  (We can assume by symmetry that the position "snakes"
  // strictly southeast.)
  recurse := proc(row,col) local g;
    grid[row][col] := ".";
    // The snake has length n, so test whether the position fulfills the
    // indicated constraint.
    if row + col == n + 1 then
      g := Domineering(grid);
      if IsNumber(g) and Temperature(g) >= -1/8 then
        solution := g;
      fi
    else
      recurse(row+1, col);
      if not defined(solution) then
        recurse(row, col+1);
      fi;
    fi;
    grid[row][col] := "x";
  end;
  
  grid[1][1] := ".";
  // By symmetry we can assume that the position begins by "snaking" south.
  recurse(2,1);
  if defined(solution) then
    return solution;
  fi
  
end;

n := 1;
clear(g);
while not defined(g) do
  n := n + 1;
  "Searching snakes of length " + n + " . . ." >> log;
  g := snakes(n);
od;
g >> out;
C(g) >> out;
"Length: " + n >> out;
